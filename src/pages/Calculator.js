import { useState } from "react";
import React from "react";
import {
  Box,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Typography,
  Paper,
} from "@mui/material";
import Footer from "@/components/Footer";
import Head from "next/head";
import Header from "@/components/Header";
import feedbackimg from "../assets/images/bg-1.png";
const Calculator = () => {
  const [period, setPeriod] = useState("");
  const [basicSalary, setBasicSalary] = useState("");
  const [overtime, setOvertime] = useState("");
  const [bonuses, setBonuses] = useState("");
  const [benefits, setBenefits] = useState("");
  const [allowances, setAllowances] = useState("");
  const [deductions, setDeductions] = useState("");
  const [ENPF, setENPF] = useState("");
  const [finalTax, setFinalTax] = useState(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    const finaltax = taxCalculaterLogic(
      period,
      basicSalary,
      overtime,
      bonuses,
      benefits,
      allowances,
      ENPF,
      deductions,
    );
  
    if (finaltax < 0) {
      alert("Tax payable cannot be less than 0");
      setFinalTax(0); // Set finalTax to 0 or any default value
    } else {
      setFinalTax(finaltax.toFixed(2));
    }
  
    setPeriod("");
    setBasicSalary("");
    setOvertime("");
    setBonuses("");
    setBenefits("");
    setAllowances("");
    setDeductions("");
    setENPF("");
  };



function handlePeriodChange(e) {
  setPeriod(e.target.value);
  if (e.target.value === "Day") {
    setENPF(11.67);
  } else if (e.target.value==="Monthly") {
    setENPF(350);
  } else if (e.target.value==="yearly") {
    setENPF(4200);
  } else if (e.target.value !== "") {
    alert("No correct value selected");
  }
}

  return (
    <>
      <Head>
        <title>Calculator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
        {/* <meta name="viewport" content="width=device-width, initial-scale=1.0"/> */}
      </Head>

      {/*-----------------------Header---------------------*/}

      <Header />

      {/*-----------------------Banner---------------------*/}

      <Box
        sx={{
          position: "relative",
          backgroundImage: `url(${feedbackimg.src})`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          py: "5rem",
        }}
      >
        <Typography
          variant="h1"
          sx={{
            fontSize: "2rem",
            fontWeight: "bold",
            margin: {
              xs: "0.9rem",
              md: "1rem",
              lg: "1.5rem",
              textAlign: "center",
            },
          }}
        >
          Tax Calculator
        </Typography>
        {/* <Image src={bgImg} width={'100%'} height={'100%'} alt="bg" style={{ position: 'absolute', top: '0', left: '0', width: '100%', objectFit: 'cover', opacity: '0.4', height: '950px' }}
                    sizes='100vw'
                /> */}
        <Box
          sx={{
            position: "relative",
            maxWidth: { xs: "550px", md: "850px", lg: "800px" },
            width: { xs: "95%", md: "70%", lg: "80%", xl: "65%" },
            margin: "0 auto",
          }}
        >
          <Paper
            elevation={20}
            sx={{ maxWidth: "800px", borderRadius: "5%", margin: "0 auto" }}
          >
            {/* <Paper elevation={10} sx={{opacity:'0.8'}}> */}
            <form onSubmit={handleSubmit} className="calculatorFormStyling">
              <FormControl
                fullWidth
                sx={{
                  marginBottom: "1rem",
                  "& .MuiInputLabel-root": {
                    top: "-8px",
                    left: "-14px",
                    marginLeft: "0.8rem",
                  },
                }}
              >
                <InputLabel>Period</InputLabel>
                <Select value={period} onChange={handlePeriodChange} required>
                  <MenuItem value="Day">Day</MenuItem>
                  <MenuItem value="Monthly">Monthly</MenuItem>
                  <MenuItem value="yearly">Yearly</MenuItem>
                </Select>
              </FormControl>

              <TextField
                fullWidth
                label="Basic Salary"
                type="number"
                value={basicSalary}
                onChange={(e) => {
                  const newValue = +e.target.value;
                  setBasicSalary(newValue < 0 ? 0 : newValue);
                  if (basicSalary === 0) {
                    setBasicSalary("");
                  }
                }}
                sx={{ marginBottom: "1rem" }}
                required
              />

              <TextField
                fullWidth
                label="Overtime"
                type="number"
                value={overtime}
                onChange={(e) => {
                    const newValue = +e.target.value;
                    setOvertime(newValue < 0 ? 0 : newValue);
                    if (overtime === 0) {
                        setOvertime("");
                    }
                  }}
                sx={{ marginBottom: "1rem" }}
                required
              />

              <TextField
                fullWidth
                label="Bonuses"
                type="number"
                value={bonuses}
                onChange={(e) => {
                    const newValue = +e.target.value;
                    setBonuses(newValue < 0 ? 0 : newValue);
                    if (bonuses === 0) {
                        setBonuses("");
                    }
                  }}
                sx={{ marginBottom: "1rem" }}
                required
              />

              <TextField
                fullWidth
                label="Benefits"
                type="number"
                value={benefits}
                onChange={(e) => {
                    const newValue = +e.target.value;
                    setBenefits(newValue < 0 ? 0 : newValue);
                    if (benefits === 0) {
                        setBenefits("");
                    }
                  }}
                sx={{ marginBottom: "1rem" }}
                required
              />

              <TextField
                fullWidth
                label="Allowances"
                type="number"
                value={allowances}
                onChange={(e) => {
                    const newValue = +e.target.value;
                    setAllowances(newValue < 0 ? 0 : newValue);
                    if (allowances === 0) {
                        setAllowances("");
                    }
                  }}
                sx={{ marginBottom: "1rem" }}
                required
              />

              <TextField
                fullWidth
                label="Deductions"
                type="number"
                value={deductions}
                onChange={(e) => {
                    const newValue = +e.target.value;
                    setDeductions(newValue < 0 ? 0 : newValue);
                    if (deductions === 0) {
                        setDeductions("");
                    }
                  }}
                sx={{ marginBottom: "1rem" }}
                required
              />
              <TextField
                fullWidth
                label="ENPF"
                type="number"
                value={ENPF}
                disabled
                sx={{ marginBottom: "1rem" }}
              />
                <Box sx={{display:"flex", alignItems:"center" , gap:"0.5rem"}}>
                <Typography variant="h5">Total Tax:</Typography>
                <Typography variant="h5">{finalTax && finalTax <= 0 ? 0  : finalTax}</Typography>
                </Box>
             
              <Button
                type="submit"
                variant="contained"
                sx={{
                  background: "#2f2483 !important",
                  p: "1rem",
                  borderRadius: "5px",
                  gridColumn: "1/-1",
                  placeSelf: "center",
                  width: "10rem",
                }}
              >
                Calculate
              </Button>
            </form>
          </Paper>
        </Box>
      </Box>
      {/*-----------------------Footer---------------------*/}
      <Footer />
    </>
  );
  {
    /* This section is use for tax calculater logic */
  }
  function taxCalculaterLogic(
    periods,
    basicSalary,
    overtime,
    bonuses,
    benefits,
    allowances,
    ENPF,
    deductions
  ) {
    let totalIncome = parseInt(
      basicSalary + overtime + bonuses + benefits + allowances
    );
    let texBeforDeductions;
    let texAmount;
    let texpercentage;
    let finalTexAmount;

    if (periods === "Day") {
      if (0 <= totalIncome && totalIncome <= 273.97) {
        totalIncome = parseFloat(totalIncome);
        texBeforDeductions = (totalIncome * 20) / 100;
      } else if (273.97 <= totalIncome && totalIncome <= 410.96) {
        texAmount = totalIncome - 273.97;
        texpercentage = (texAmount * 25) / 100;
        texBeforDeductions = texpercentage + 54.97;
      } else if (410.96 <= totalIncome && totalIncome <= 547.95) {
        texAmount = totalIncome - 410.96;
        texpercentage = (texAmount * 30) / 100;
        texBeforDeductions = texpercentage + 89.04;
      } else if (547.95 < totalIncome) {
        texAmount = totalIncome - 547.95;
        texpercentage = (texAmount * 33) / 100;
        texBeforDeductions = texpercentage + 130.14;
      }
    }

    if (periods === "Monthly") {
      if (0 <= totalIncome && totalIncome <= 8333.33) {
        totalIncome = parseFloat(totalIncome);
        texBeforDeductions = (totalIncome * 20) / 100;
      } else if (8333.33 <= totalIncome && totalIncome <= 12500) {
        texAmount = totalIncome - 8333.33;
        texpercentage = (texAmount * 25) / 100;
        texBeforDeductions = texpercentage + 1666.67;
      } else if (12500 <= totalIncome && totalIncome <= 16666.67) {
        texAmount = totalIncome - 12500;
        texpercentage = (texAmount * 30) / 100;
        texBeforDeductions = texpercentage + 2708.33;
      } else if (16666.67 < totalIncome) {
        texAmount = totalIncome - 16666.67;
        texpercentage = (texAmount * 33) / 100;
        texBeforDeductions = texpercentage + 3958.33;
      }
    }

    if (periods === "yearly") {
      if (0 <= totalIncome && totalIncome <= 100000) {

        totalIncome = parseFloat(totalIncome);
        texBeforDeductions = (totalIncome * 20) / 100;
      } 
      else if (100000 <= totalIncome && totalIncome <= 150000) {
        texAmount = totalIncome - 100000;
        texpercentage = (texAmount * 25) / 100;
        texBeforDeductions = texpercentage + 20000;
      }
       else if (150000 <= totalIncome && totalIncome <= 200000) {
        texAmount = totalIncome - 150000;
        texpercentage = (texAmount * 30) / 100;
        texBeforDeductions = texpercentage + 32500;
      }
       else if (200000 < totalIncome) {
        texAmount = totalIncome - 200000;
        texpercentage = (texAmount * 33) / 100;
        texBeforDeductions = texpercentage + 47500;
      }
    }
    finalTexAmount = texBeforDeductions - ENPF - deductions;
    return finalTexAmount;
  }
};

export default Calculator;
